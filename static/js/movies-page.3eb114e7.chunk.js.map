{"version":3,"sources":["services/movieApi.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","components/MoviesList/MovieList.module.css","components/MoviesList/MoviesList.js","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.js","views/MoviesPage.js"],"names":["axios","defaults","baseURL","API_KEY","movieApi","fetchMovies","get","fetchSearch","searchQuery","fetchMovie","movieId","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","module","exports","withRouter","movies","location","className","s","list","map","movie","listEl","links","to","pathname","id","state","from","name","title","SearchBar","query","handleChange","e","setState","currentTarget","handleSubmit","preventDefault","props","onSubmit","this","type","button","autoComplete","onChange","autoFocus","placeholder","Component","MoviesPage","onChangeQuery","history","search","slice","prevProps","prevState","a","response","data","results","Searchbar","MoviesList"],"mappings":"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","file":"static/js/movies-page.3eb114e7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = '?api_key=a74414b944f8b513109b376ad415325e';\r\n\r\nconst fetchMovies = () => {\r\n  return axios.get(`trending/movie/day${API_KEY}`);\r\n};\r\n\r\nconst fetchSearch = ({ searchQuery = '' }) => {\r\n  return axios.get(\r\n    `search/movie${API_KEY}&language=en-US&include_adult=false&query=${searchQuery}`,\r\n  );\r\n};\r\n\r\nconst fetchMovie = movieId => {\r\n  return axios.get(`movie/${movieId}images${API_KEY}&language=en-US`);\r\n};\r\n\r\nconst movieApi = {\r\n  fetchMovies,\r\n  fetchSearch,\r\n  fetchMovie,\r\n};\r\nexport default movieApi;\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MovieList_list__TGrWS\",\"links\":\"MovieList_links__1Uk__\",\"listEl\":\"MovieList_listEl__eCcLE\"};","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport s from './MovieList.module.css';\r\n\r\nconst MoviesList = ({ movies, location }) => {\r\n  // console.log('location:', location);\r\n  // console.log('props:', this.props);\r\n  return (\r\n    <ul className={s.list}>\r\n      {movies.map(movie => (\r\n        <li className={s.listEl} key={movie.id}>\r\n          <Link\r\n            className={s.links}\r\n            to={{\r\n              pathname: `/movies/${movie.id}`,\r\n              state: {\r\n                from: location,\r\n              },\r\n            }}\r\n          >\r\n            {movie.name || movie.title}\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default withRouter(MoviesList);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Searchbar_button__2-i71\"};","import React, { Component } from 'react';\r\nimport s from './Searchbar.module.css';\r\n\r\nclass SearchBar extends Component {\r\n  state = { query: '' };\r\n\r\n  handleChange = e => {\r\n    this.setState({ query: e.currentTarget.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit(this.state.query);\r\n\r\n    this.setState({ query: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <button type=\"submit\" className={s.button}>\r\n          Search\r\n        </button>\r\n\r\n        <input\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          value={this.state.query}\r\n          onChange={this.handleChange}\r\n          autoFocus\r\n          placeholder=\"Search movies\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport movieApi from '../services/movieApi';\r\nimport Searchbar from '../components/Searchbar';\r\nimport MoviesList from '../components/MoviesList';\r\n\r\nclass MoviesPage extends Component {\r\n  state = {\r\n    movies: [],\r\n    searchQuery: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { search, pathname } = this.props.location;\r\n    if (pathname && search) {\r\n      this.setState({ searchQuery: search.slice(7) });\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.searchQuery !== this.state.searchQuery) {\r\n      const { searchQuery } = this.state;\r\n      const response = await movieApi.fetchSearch({ searchQuery });\r\n      const data = response.data.results;\r\n      this.setState({\r\n        movies: data,\r\n      });\r\n    }\r\n  }\r\n  onChangeQuery = query => {\r\n    this.setState({\r\n      searchQuery: query,\r\n    });\r\n    this.props.history.push({\r\n      ...this.props.location,\r\n      search: `?query=${query}`,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { movies } = this.state;\r\n    return (\r\n      <>\r\n        <Searchbar onSubmit={this.onChangeQuery} />\r\n        {movies && <MoviesList movies={movies} />}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default MoviesPage;\r\n"],"sourceRoot":""}